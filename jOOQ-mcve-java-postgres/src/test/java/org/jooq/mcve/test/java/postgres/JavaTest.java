package org.jooq.mcve.test.java.postgres;

import org.jooq.DSLContext;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.postgres.tables.records.TestRecord;
import org.jooq.tools.JooqLogger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.utility.ResourceReaper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import static org.jooq.mcve.java.postgres.Tables.TEST;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    static JooqLogger             log = JooqLogger.getLogger(JavaTest.class);
    static PostgreSQLContainer<?> db;
    static Connection             connection;
    static DSLContext             ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("jooq.codegen.jdbc.url") == null) {
            db = new org.testcontainers.containers.PostgreSQLContainer<>("postgres:latest")
                 .withUsername("postgres")
                 .withDatabaseName("postgres")
                 .withPassword("postgres")
                 .withInitScript("db/migration/init.sql");

            db.start();
            System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl());
            System.setProperty("jooq.codegen.jdbc.username", db.getUsername());
            System.setProperty("jooq.codegen.jdbc.password", db.getPassword());
        }

        Properties properties = new Properties();
        properties.setProperty("username", "postgres");
        properties.setProperty("password", "postgres");

        log.info("Connecting");
        connection = DriverManager.getConnection(
            System.getProperty("jooq.codegen.jdbc.url"),
            System.getProperty("jooq.codegen.jdbc.username"),
            System.getProperty("jooq.codegen.jdbc.password")
        );

        ctx = DSL.using(connection, SQLDialect.POSTGRES);

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {
        var tableWithAliasT = TEST.as("t");

        var rowsAffected = ctx.insertInto(tableWithAliasT)
                .set(TEST.CD, 42)
                .onDuplicateKeyUpdate()
                .set(TEST.CD, 43)
                .execute();

        assertEquals(1, rowsAffected);

        TestRecord record = ctx.fetchSingle(TEST);
        assertNotNull(record.getId());
        assertEquals(42, record.getCd().intValue());
    }
}
